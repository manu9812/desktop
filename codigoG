import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;

public class CreateFiles {
	/**
	 * metodo par llamar a la funcion 
	 * createFiles y genere una cadena de codigos que se asemejan a codigos geneticos 
	 * @param args
	 * @throws IOException
	 */
	
public static void main(String[] args) throws IOException {
		
		CreateFiles cf = new CreateFiles();
		System.out.println(cf.countReads("ACGTT"));
	}
	
	/**
	 * 
	 */
	  public CreateFiles(){
		
		int start, length;
		String Sequence;
		Random rd = new Random();
		
		try{
			
			BufferedWriter bf = new BufferedWriter(new FileWriter ("Secuencias.umd"));
			
			for (int i = 0; i < 1000; i++)
			{
				start = Math.abs( rd.nextInt());
				length = 5 + rd.nextInt(25);
				
				Sequence = "";
				
				for(int j = 0; j < length; j++ )
				{
					switch(rd.nextInt(4))
					{
					case 0: Sequence += "A"; break;
					case 1: Sequence += "C"; break;
					case 2: Sequence += "G"; break;
					case 3: Sequence += "T"; break;
					
					}
				}
				
				bf.write(start + "," + (start + length) +  "," + Sequence + "\n");
			
			}
			bf.flush();
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
		}
	  /**
	   *   metodo para calcular la cantidad de veces que se repite un patron genetico en toda la secuencia
	   * @param motif
	   * @return
	   * @throws IOException
	   */
	
	public int countReads(String motif) throws IOException
	{
		/**
		 * 
		 */
		BufferedReader br = new BufferedReader (new FileReader("Secuencias.umd"));
		String read;
		int lines = 0;
		read = br.readLine();
		while(read != null)
		{
			if (read.split(",")[2].contains(motif))
			{
				lines += 1;
			}
			
			read = br.readLine();
		}
		return lines;
	}
}


			
		
	
	
